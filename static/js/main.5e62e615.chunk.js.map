{"version":3,"sources":["App.js","index.js"],"names":["Weather","city","useState","weatherData","setWeatherData","url","useEffect","axios","get","then","response","data","current","temperature","alt","src","weather_icons","wind_speed","wind_dir","Country","props","name","country","setCountryFilter","Table","Row","Cell","Button","onClick","CountryDetail","capital","population","languages","flag","map","language","key","iso639_1","width","Countries","countries","countryFilter","length","filteredCountries","filter","toLowerCase","includes","Message","basic","cell","unstackable","compact","Body","App","setCountries","Container","text","style","paddingTop","paddingBottom","Grid","columns","Column","Header","as","textAlign","Content","Divider","Input","label","focus","placeholder","onChange","event","target","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5e62e615.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport {\n  Button,\n  Container,\n  Divider,\n  Grid,\n  Input,\n  Label,\n  Header,\n  Message,\n  Table,\n} from 'semantic-ui-react';\n\nconst Weather = ({ city }) => {\n  const [weatherData, setWeatherData] = useState(-1);\n  const accessKey = '66fc4921f8cfa66fdbdbb69478498de0';\n  const url = `http://api.weatherstack.com/current?access_key=${accessKey}&query=${city}`;\n\n  useEffect(() => {\n    axios.get(url).then((response) => {\n      setWeatherData(response.data.current);\n    });\n    // https://stackoverflow.com/questions/55840294/how-to-fix-missing-dependency-warning-when-using-useeffect-react-hook\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (weatherData === -1) {\n    return <p>Loading weather data</p>;\n  }\n\n  return (\n    <div>\n      <h2>Weather in {city}</h2>\n      <p>Temperature: {weatherData.temperature} Celsius</p>\n      <img alt=\"icon\" src={weatherData.weather_icons[0]} />\n      <p>\n        Wind: {weatherData.wind_speed} kph direction {weatherData.wind_dir}{' '}\n      </p>\n    </div>\n  );\n};\n\nconst Country = (props) => {\n  const { name } = props.country;\n  const { setCountryFilter } = props;\n  return (\n    <Table.Row>\n      <Table.Cell>{name}</Table.Cell>\n      <Table.Cell>\n        <Button onClick={() => setCountryFilter(name)}>show</Button>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nconst CountryDetail = (props) => {\n  const { name, capital, population, languages, flag } = props.country;\n\n  const languageRows = () => {\n    return languages.map((language) => {\n      return <li key={language.iso639_1}>{language.name}</li>;\n    });\n  };\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      <p>Capital: {capital}</p>\n      <p>Population: {population}</p>\n      <h2>Languages</h2>\n      <ul>{languageRows()}</ul>\n      <img alt=\"flag\" src={flag} width=\"150px\" />\n      <Weather city={capital} />\n    </div>\n  );\n};\n\nconst Countries = (props) => {\n  const { countries, countryFilter, setCountryFilter } = props;\n\n  if (countries.length === 0) {\n    return <p>Loading ...</p>;\n  }\n\n  let filteredCountries = countries;\n  if (countryFilter === '') {\n    return null;\n  } else {\n    filteredCountries = countries.filter((country) =>\n      country.name.toLowerCase().includes(countryFilter.toLowerCase())\n    );\n  }\n\n  if (filteredCountries.length > 10) {\n    return <Message>Over 10 matches not shown</Message>;\n  }\n\n  if (filteredCountries.length > 1) {\n    const countries = filteredCountries.map((country) => (\n      <Country\n        key={country.name}\n        country={country}\n        setCountryFilter={setCountryFilter}\n      />\n    ));\n    return (\n      <Table basic=\"very\" cell unstackable compact>\n        <Table.Body>{countries}</Table.Body>\n      </Table>\n    );\n  }\n\n  if (filteredCountries.length === 0) {\n    return <p>No matches!</p>;\n  }\n\n  // Have exactly 1 country now\n  // assert(filteredCountries.length === 1);\n\n  return <CountryDetail country={filteredCountries[0]} />;\n};\n\nconst App = (props) => {\n  const [countries, setCountries] = useState([]);\n  const [countryFilter, setCountryFilter] = useState('sw');\n\n  const onCountryFilterChange = (event) => {\n    setCountryFilter(event.target.value);\n  };\n\n  useEffect(() => {\n    axios.get('https://restcountries.eu/rest/v2/all').then((response) => {\n      setCountries(response.data);\n    });\n  }, []);\n\n  return (\n    <Container text style={{ paddingTop: '1em', paddingBottom: '1em' }}>\n      <Grid columns={1}>\n        <Grid.Column>\n          <Header as=\"h1\" textAlign=\"center\">\n            <Header.Content>Maiden tiedot</Header.Content>\n          </Header>\n          <Divider />\n          <Input\n            style={{ width: '100%' }}\n            label=\"Country name:\"\n            focus\n            placeholder=\"Search...\"\n            onChange={onCountryFilterChange}\n            value={countryFilter}\n          />\n          <Divider />\n          <Countries\n            countries={countries}\n            countryFilter={countryFilter}\n            setCountryFilter={setCountryFilter}\n          />\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}